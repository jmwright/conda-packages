parameters:
  name: 'Conda build job'
  vmImage: 'Ubuntu-latest'
  py_maj: '3'
  py_min: '9'
  location: 'conda'
  conda_bld: '3.21.6'
  conda: '22.9.0'

jobs:
- job: ${{ parameters.name }}_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 360
  
  pool:
    vmImage: ${{ parameters.vmImage }}
    
  steps: 
  
  # this step is needed for OCC to find fonts
  - bash: |
      sudo apt-get -q -y install gsfonts xfonts-utils && \
      sudo mkfontscale /usr/share/fonts/type1/gsfonts/ && \
      sudo mkfontdir /usr/share/fonts/type1/gsfonts/
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: 'Help OCC find fonts'
        
  # Ubunut install opengl items
  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: |
        sudo apt-get update && \
        sudo apt-get -q -y install libglu1-mesa-dev freeglut3-dev mesa-common-dev
      displayName: 'Install OpenGL headers'
  
  - template: conda-enable.yml
    parameters:
      vmImage: ${{ parameters.vmImage }}
      
  - bash: conda create --yes --quiet --name build_env -c conda-forge conda-build boa conda-verify libarchive python=3.12 anaconda-client
    displayName: Create Anaconda environment
    
  - bash: |
      cd ${{ parameters.location }} && \
      conda run -n build_env conda mambabuild -c conda-forge -c cadquery --output-folder . . && \
      full_path=$(conda run -n build_env conda build --output -c conda-forge -c cadquery --output-folder . . ) && \
      echo $full_path && \
      base_name=$(basename $full_path) && \
      split_name=($(IFS=-; tmp=($base_name); echo ${tmp[@]})) && \
      package_name=${split_name[@]: 0 : ${#split_name[@]} - 2} && \
      package_name=${package_name/ /-} && \
      version_name=${split_name[-2]} && \
      echo "Removing $base_name" && \
      conda run -n build_env anaconda -v -t $TOKEN remove --force "cadquery/$package_name/$version_name"  && \
      echo "Uploading $full_path" && \
      conda run -n build_env anaconda -v -t $TOKEN upload -u cadquery --force $full_path && \
      cd ..
    displayName: 'Run conda build'
    failOnStderr: false
    condition: ne(variables['Build.Reason'], 'PullRequest')
    env:
      PYTHON_VERSION: ${{ parameters.py_maj }}.${{ parameters.py_min }}
      PACKAGE_VERSION: $(Build.SourceBranchName)
      TOKEN: $(anaconda.TOKEN)
    
  - bash: |
      cd ${{ parameters.location }} && \
      conda run -n build_env conda mambabuild -c conda-forge -c cadquery . && \
      cd ..
    displayName: 'Run conda build without upload'
    failOnStderr: false
    condition: eq(variables['Build.Reason'], 'PullRequest')
    env:
      PYTHON_VERSION: ${{ parameters.py_maj }}.${{ parameters.py_min }}
      PACKAGE_VERSION: $(Build.SourceBranchName)
      TOKEN: $(anaconda.TOKEN)
